!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
BUFFER_MGR_H	Main/BufferMgr/headers/MyDB_BufferManager.h	/^#define BUFFER_MGR_H$/;"	d
MyDB_BufferManager	Main/BufferMgr/headers/MyDB_BufferManager.h	/^class MyDB_BufferManager {$/;"	c
MyDB_PageHandle	Main/BufferMgr/headers/MyDB_PageHandle.h	/^typedef shared_ptr <MyDB_PageHandleBase> MyDB_PageHandle;$/;"	t
MyDB_PageHandleBase	Main/BufferMgr/headers/MyDB_PageHandle.h	/^class MyDB_PageHandleBase {$/;"	c
PAGE_HANDLE_H	Main/BufferMgr/headers/MyDB_PageHandle.h	/^#define PAGE_HANDLE_H$/;"	d
BUFFER_MGR_C	Main/BufferMgr/source/MyDB_BufferManager.cc	/^#define BUFFER_MGR_C$/;"	d	file:
MyDB_BufferManager	Main/BufferMgr/source/MyDB_BufferManager.cc	/^MyDB_BufferManager :: MyDB_BufferManager (size_t, size_t, string) {$/;"	f	class:MyDB_BufferManager
getPage	Main/BufferMgr/source/MyDB_BufferManager.cc	/^MyDB_PageHandle MyDB_BufferManager :: getPage () {$/;"	f	class:MyDB_BufferManager
getPage	Main/BufferMgr/source/MyDB_BufferManager.cc	/^MyDB_PageHandle MyDB_BufferManager :: getPage (MyDB_TablePtr, long) {$/;"	f	class:MyDB_BufferManager
getPinnedPage	Main/BufferMgr/source/MyDB_BufferManager.cc	/^MyDB_PageHandle MyDB_BufferManager :: getPinnedPage () {$/;"	f	class:MyDB_BufferManager
getPinnedPage	Main/BufferMgr/source/MyDB_BufferManager.cc	/^MyDB_PageHandle MyDB_BufferManager :: getPinnedPage (MyDB_TablePtr, long) {$/;"	f	class:MyDB_BufferManager
unpin	Main/BufferMgr/source/MyDB_BufferManager.cc	/^void MyDB_BufferManager :: unpin (MyDB_PageHandle unpinMe) {$/;"	f	class:MyDB_BufferManager
~MyDB_BufferManager	Main/BufferMgr/source/MyDB_BufferManager.cc	/^MyDB_BufferManager :: ~MyDB_BufferManager () {$/;"	f	class:MyDB_BufferManager
PAGE_HANDLE_C	Main/BufferMgr/source/MyDB_PageHandle.cc	/^#define PAGE_HANDLE_C$/;"	d	file:
getBytes	Main/BufferMgr/source/MyDB_PageHandle.cc	/^void *MyDB_PageHandleBase :: getBytes () {$/;"	f	class:MyDB_PageHandleBase
wroteBytes	Main/BufferMgr/source/MyDB_PageHandle.cc	/^void MyDB_PageHandleBase :: wroteBytes () {$/;"	f	class:MyDB_PageHandleBase
~MyDB_PageHandleBase	Main/BufferMgr/source/MyDB_PageHandle.cc	/^MyDB_PageHandleBase :: ~MyDB_PageHandleBase () {$/;"	f	class:MyDB_PageHandleBase
CATALOG_UNIT_H	Main/BufferTest/source/BufferQUnit.cc	/^#define CATALOG_UNIT_H$/;"	d	file:
main	Main/BufferTest/source/BufferQUnit.cc	/^int main () {$/;"	f
writeLetters	Main/BufferTest/source/BufferQUnit.cc	/^void writeLetters (char *bytes, size_t len, int i) {$/;"	f
writeNums	Main/BufferTest/source/BufferQUnit.cc	/^void writeNums (char *bytes, size_t len, int i) {$/;"	f
writeSymbols	Main/BufferTest/source/BufferQUnit.cc	/^void writeSymbols (char *bytes, size_t len, int i) {$/;"	f
MyDB_Table	Main/Catalog/headers/MyDB_Table.h	/^class MyDB_Table {$/;"	c
MyDB_TablePtr	Main/Catalog/headers/MyDB_Table.h	/^typedef shared_ptr <MyDB_Table> MyDB_TablePtr;$/;"	t
TABLE_H	Main/Catalog/headers/MyDB_Table.h	/^#define TABLE_H$/;"	d
storageLoc	Main/Catalog/headers/MyDB_Table.h	/^	string storageLoc;$/;"	m	class:MyDB_Table
tableName	Main/Catalog/headers/MyDB_Table.h	/^	string tableName;$/;"	m	class:MyDB_Table
MyDB_Table	Main/Catalog/source/MyDB_Table.cc	/^MyDB_Table :: MyDB_Table (string name, string storageLocIn) {$/;"	f	class:MyDB_Table
TABLE_C	Main/Catalog/source/MyDB_Table.cc	/^#define TABLE_C$/;"	d	file:
getName	Main/Catalog/source/MyDB_Table.cc	/^string &MyDB_Table :: getName () {$/;"	f	class:MyDB_Table
getStorageLoc	Main/Catalog/source/MyDB_Table.cc	/^string &MyDB_Table :: getStorageLoc () {$/;"	f	class:MyDB_Table
~MyDB_Table	Main/Catalog/source/MyDB_Table.cc	/^MyDB_Table :: ~MyDB_Table () {}$/;"	f	class:MyDB_Table
QUNIT_COMPARE	Main/Qunit/headers/QUnit.h	/^#define QUNIT_COMPARE(/;"	d
QUNIT_IS_EQUAL	Main/Qunit/headers/QUnit.h	/^#define QUNIT_IS_EQUAL(/;"	d
QUNIT_IS_FALSE	Main/Qunit/headers/QUnit.h	/^#define QUNIT_IS_FALSE(/;"	d
QUNIT_IS_NOT_EQUAL	Main/Qunit/headers/QUnit.h	/^#define QUNIT_IS_NOT_EQUAL(/;"	d
QUNIT_IS_TRUE	Main/Qunit/headers/QUnit.h	/^#define QUNIT_IS_TRUE(/;"	d
QUnit	Main/Qunit/headers/QUnit.h	/^namespace QUnit {$/;"	n
UnitTest	Main/Qunit/headers/QUnit.h	/^    class UnitTest {$/;"	c	namespace:QUnit
UnitTest	Main/Qunit/headers/QUnit.h	/^    inline UnitTest::UnitTest(std::ostream & out, int verboseLevel)$/;"	f	class:QUnit::UnitTest
_QUNIT_H_	Main/Qunit/headers/QUnit.h	/^#define _QUNIT_H_$/;"	d
errors	Main/Qunit/headers/QUnit.h	/^    inline int UnitTest::errors() const {$/;"	f	class:QUnit::UnitTest
errors_	Main/Qunit/headers/QUnit.h	/^        int errors_;$/;"	m	class:QUnit::UnitTest
evaluate	Main/Qunit/headers/QUnit.h	/^    inline void UnitTest::evaluate($/;"	f	class:QUnit::UnitTest
noisy	Main/Qunit/headers/QUnit.h	/^    enum { silent, quiet, normal, verbose, noisy };$/;"	e	enum:QUnit::__anon1
normal	Main/Qunit/headers/QUnit.h	/^    enum { silent, quiet, normal, verbose, noisy };$/;"	e	enum:QUnit::__anon1
out_	Main/Qunit/headers/QUnit.h	/^        std::ostream & out_;$/;"	m	class:QUnit::UnitTest
printStatus	Main/Qunit/headers/QUnit.h	/^    inline void UnitTest::printStatus() {$/;"	f	class:QUnit::UnitTest
quiet	Main/Qunit/headers/QUnit.h	/^    enum { silent, quiet, normal, verbose, noisy };$/;"	e	enum:QUnit::__anon1
silent	Main/Qunit/headers/QUnit.h	/^    enum { silent, quiet, normal, verbose, noisy };$/;"	e	enum:QUnit::__anon1
tests_	Main/Qunit/headers/QUnit.h	/^        int tests_;$/;"	m	class:QUnit::UnitTest
verbose	Main/Qunit/headers/QUnit.h	/^    enum { silent, quiet, normal, verbose, noisy };$/;"	e	enum:QUnit::__anon1
verboseLevel	Main/Qunit/headers/QUnit.h	/^    inline int UnitTest::verboseLevel() {$/;"	f	class:QUnit::UnitTest
verboseLevel	Main/Qunit/headers/QUnit.h	/^    inline void UnitTest::verboseLevel(int level) {$/;"	f	class:QUnit::UnitTest
verboseLevel_	Main/Qunit/headers/QUnit.h	/^        int verboseLevel_;$/;"	m	class:QUnit::UnitTest
~UnitTest	Main/Qunit/headers/QUnit.h	/^    inline UnitTest::~UnitTest() {$/;"	f	class:QUnit::UnitTest
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
